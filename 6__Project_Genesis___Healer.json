{
  "name": "6. Project Genesis - Healer",
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "id": "b7633c59-ff39-49bb-bcbb-e3a494df166a",
      "name": "Healing Request",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -2160,
        110
      ]
    },
    {
      "parameters": {
        "content": "## 🔧 GENESIS HEALER\nDiagnoses and automatically fixes issues in workflows. Self-healing at its finest.",
        "height": 200,
        "width": 400,
        "color": 2
      },
      "id": "3aebfd7f-cc1a-4280-b5b2-2631d6653e87",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2160,
        -180
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process healing request\nconst healingRequest = $input.first().json;\nconst unhealthyWorkflows = healingRequest.unhealthyWorkflows || [];\nconst priority = healingRequest.priority || 'normal';\n\n// Prepare healing tasks\nconst healingTasks = [];\n\nfor (const workflow of unhealthyWorkflows) {\n  const task = {\n    workflowId: workflow.workflowId,\n    workflowName: workflow.workflowName,\n    healthStatus: workflow.healthStatus,\n    issues: workflow.issues || [],\n    lastError: workflow.lastError,\n    errorRate: workflow.errorRate,\n    priority: workflow.healthStatus === 'critical' ? 'high' : priority,\n    healingStrategy: determineStrategy(workflow)\n  };\n  \n  healingTasks.push(task);\n}\n\nfunction determineStrategy(workflow) {\n  // Intelligent healing strategy selection\n  if (workflow.healthStatus === 'inactive') {\n    return 'reactivate';\n  } else if (workflow.lastError?.error?.includes('auth') || \n             workflow.lastError?.error?.includes('401') ||\n             workflow.lastError?.error?.includes('credentials')) {\n    return 'fix_auth';\n  } else if (workflow.lastError?.error?.includes('timeout')) {\n    return 'increase_timeout';\n  } else if (workflow.lastError?.error?.includes('rate limit')) {\n    return 'add_rate_limiting';\n  } else if (workflow.errorRate > 0.5) {\n    return 'rebuild';\n  } else {\n    return 'patch';\n  }\n}\n\nreturn healingTasks;"
      },
      "id": "0d946f31-7bf6-419a-9fcf-a6483e966138",
      "name": "Prepare Healing Tasks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1940,
        110
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "=healingTasks",
        "options": {}
      },
      "id": "72c1294a-230a-418a-b4d0-f1eeb8b9243f",
      "name": "Split Healing Tasks",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 3,
      "position": [
        -1720,
        110
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.healingStrategy }}",
                    "rightValue": "reactivate",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "reactivate"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.healingStrategy }}",
                    "rightValue": "fix_auth",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "fix_auth"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.healingStrategy }}",
                    "rightValue": "patch",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "patch"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.healingStrategy }}",
                    "rightValue": "rebuild",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "rebuild"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "ea278dbe-be9c-40b5-8fe5-46eb6159323f",
      "name": "Route by Strategy",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -1500,
        68
      ]
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://8.orengen.io/api/v1/workflows/{{ $json.workflowId }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "n8nApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "active",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "id": "1e4fefd0-0583-4ab8-adf6-31f9f3a398c5",
      "name": "Reactivate Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -308,
        -440
      ],
      "credentials": {
        "n8nApi": {
          "id": "U9bPQvXlmGxCr8nu",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Workflow: {{ $json.workflowName }}\nError: {{ $json.lastError.error }}\n\nProvide specific steps to fix this authentication issue.",
        "options": {
          "systemMessage": "You are the Genesis Healer, an expert at fixing n8n workflow issues. Analyze authentication errors and provide clear, actionable solutions. Be concise and specific about which credentials need updating and how."
        }
      },
      "id": "a9b51ab1-d82f-473a-80b9-57d6f125ffdb",
      "name": "Diagnose Auth Issue",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1280,
        -290
      ]
    },
    {
      "parameters": {
        "url": "=https://8.orengen.io/api/v1/workflows/{{ $json.workflowId }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "n8nApi",
        "options": {}
      },
      "id": "5399e10d-722c-488b-aa78-57dede31d023",
      "name": "Get Workflow Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1202,
        110
      ],
      "credentials": {
        "n8nApi": {
          "id": "U9bPQvXlmGxCr8nu",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Workflow: {{ $json.data.name }}\nError: {{ $('Split Healing Tasks').item.json.lastError }}\nIssues: {{ $('Split Healing Tasks').item.json.issues }}\n\nCurrent workflow JSON:\n{{ JSON.stringify($json.data) }}\n\nGenerate specific code changes to fix the issues. Return only the modified nodes or connections.",
        "options": {
          "systemMessage": "You are the Genesis Healer. Analyze failing workflows and generate patches to fix them. Focus on the specific error and provide ONLY the nodes that need to be modified, not the entire workflow. Use proper n8n node syntax."
        }
      },
      "id": "bb15e141-799b-46da-9ced-72d1080ecc58",
      "name": "Generate Patch",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -904,
        210
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "temperature": 0.3
        }
      },
      "id": "9ea82b11-b6ba-4b57-b0f1-d8d6d625e2b9",
      "name": "GPT for Auth",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -1252,
        -70
      ],
      "credentials": {
        "openAiApi": {
          "id": "YHkSu30gSi9Rhwf6",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": "claude-3-5-sonnet-20241022",
        "options": {
          "maxTokensToSample": 4000,
          "temperature": 0.2
        }
      },
      "id": "193fea40-8b8f-4902-b4e8-0bd138e1fce6",
      "name": "Claude for Patches",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        -876,
        430
      ],
      "credentials": {
        "anthropicApi": {
          "id": "HvbZsCwADVfKiEdW",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {},
      "id": "2f02577f-65d9-4299-a0f9-8253c6e7e37c",
      "name": "Auth Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -1132,
        -70
      ]
    },
    {
      "parameters": {},
      "id": "1d226340-641e-4851-9411-ce9bd0dbbe7d",
      "name": "Patch Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -756,
        430
      ]
    },
    {
      "parameters": {
        "jsCode": "// Apply the generated patch\nconst workflow = $('Get Workflow Details').item.json.data;\nconst patchResponse = $input.first().json.output || $input.first().json.response || '';\n\ntry {\n  // Parse patch if it's JSON\n  let patchData;\n  if (patchResponse.includes('{')) {\n    const jsonMatch = patchResponse.match(/{[\\s\\S]*}/m);\n    if (jsonMatch) {\n      patchData = JSON.parse(jsonMatch[0]);\n    }\n  }\n  \n  // Apply patch based on type\n  if (patchData?.nodes) {\n    // Update specific nodes\n    for (const patchNode of patchData.nodes) {\n      const nodeIndex = workflow.nodes.findIndex(n => n.name === patchNode.name);\n      if (nodeIndex >= 0) {\n        workflow.nodes[nodeIndex] = { ...workflow.nodes[nodeIndex], ...patchNode };\n      }\n    }\n  }\n  \n  if (patchData?.connections) {\n    // Update connections\n    workflow.connections = { ...workflow.connections, ...patchData.connections };\n  }\n  \n  // Add healing metadata\n  workflow.meta = workflow.meta || {};\n  workflow.meta.lastHealed = new Date().toISOString();\n  workflow.meta.healingCount = (workflow.meta.healingCount || 0) + 1;\n  \n  return [{\n    success: true,\n    patchedWorkflow: workflow,\n    healingNotes: patchData?.notes || 'Patch applied successfully'\n  }];\n  \n} catch (error) {\n  return [{\n    success: false,\n    error: error.message,\n    originalWorkflow: workflow\n  }];\n}"
      },
      "id": "e172204b-8c17-4bcf-82c0-73f42cd6aefc",
      "name": "Apply Patch",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -528,
        210
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://8.orengen.io/api/v1/workflows/{{ $('Split Healing Tasks').item.json.workflowId }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "n8nApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.patchedWorkflow) }}",
        "options": {}
      },
      "id": "5de60e80-9227-44d7-87bc-1e299df93497",
      "name": "Update Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -88,
        285
      ],
      "credentials": {
        "n8nApi": {
          "id": "U9bPQvXlmGxCr8nu",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check_success",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "0f82dc67-01f2-4186-b8e5-dca3481383b8",
      "name": "Patch Successful?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -308,
        210
      ]
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "healingResult",
              "renameField": true,
              "outputFieldName": "allHealingResults"
            }
          ]
        },
        "options": {}
      },
      "id": "996beabf-6629-451e-83bf-defe2919401e",
      "name": "Merge Healing Results",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        132,
        135
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate healing report\nconst results = $input.first().json.allHealingResults || [];\nconst report = {\n  timestamp: new Date().toISOString(),\n  totalHealed: results.length,\n  successful: 0,\n  failed: 0,\n  strategies: {},\n  details: []\n};\n\n// Analyze results\nfor (const result of results) {\n  if (result.success) {\n    report.successful++;\n  } else {\n    report.failed++;\n  }\n  \n  // Count strategies\n  const strategy = result.strategy || 'unknown';\n  report.strategies[strategy] = (report.strategies[strategy] || 0) + 1;\n  \n  // Add details\n  report.details.push({\n    workflow: result.workflowName,\n    strategy: strategy,\n    success: result.success,\n    notes: result.notes || result.error || 'No details'\n  });\n}\n\nreport.healingRate = report.totalHealed > 0 ? \n  (report.successful / report.totalHealed * 100).toFixed(1) + '%' : '0%';\n\nreturn [report];"
      },
      "id": "b7195898-3319-43ba-8bfd-30c2fc173591",
      "name": "Generate Healing Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        135
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://your-metrics-endpoint/webhook/genesis-metrics",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "event",
              "value": "healing_complete"
            },
            {
              "name": "report",
              "value": "={{ $json }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "b519a2b8-2725-443a-8967-5345c1d7b539",
      "name": "Log Healing Metrics",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        572,
        35
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "content": "## 🔧 Healing Strategies\n\n**Reactivate**: Simply turn workflow back on\n**Fix Auth**: Diagnose and fix credential issues\n**Patch**: Apply targeted fixes to nodes\n**Rebuild**: Complete workflow redesign\n**Rate Limit**: Add delays and queuing\n**Timeout**: Increase execution limits",
        "height": 250,
        "width": 350,
        "color": 4
      },
      "id": "2a612641-e2d6-42e6-863b-24edf4573ea5",
      "name": "Strategies Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2160,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success",
              "name": "success",
              "value": "={{ true }}",
              "type": "boolean"
            },
            {
              "id": "workflow_id",
              "name": "workflowId",
              "value": "={{ $json.workflowId }}",
              "type": "string"
            },
            {
              "id": "workflow_name",
              "name": "workflowName",
              "value": "={{ $json.workflowName }}",
              "type": "string"
            },
            {
              "id": "strategy_used",
              "name": "strategy",
              "value": "reactivate",
              "type": "string"
            },
            {
              "id": "healing_notes",
              "name": "notes",
              "value": "Workflow successfully reactivated",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "4629d724-f42b-496c-9199-0f0a650d653d",
      "name": "Reactivate Success",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -88,
        -440
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle special healing cases\nconst healingTask = $input.first().json;\n\n// Rate limiting healing\nif (healingTask.healingStrategy === 'add_rate_limiting') {\n  return [{\n    action: 'add_wait_nodes',\n    waitTime: 1000,\n    betweenNodes: ['HTTP Request', 'Webhook']\n  }];\n}\n\n// Timeout healing\nif (healingTask.healingStrategy === 'increase_timeout') {\n  return [{\n    action: 'update_timeout',\n    newTimeout: 300000 // 5 minutes\n  }];\n}\n\n// Default to standard patch\nreturn [{\n  action: 'standard_patch'\n}];"
      },
      "id": "ee9c7a7c-7c65-482e-b736-bf73445d0b6b",
      "name": "Special Healing Cases",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1202,
        510
      ]
    },
    {
      "parameters": {
        "content": "## ❌ Error Handling\nFailed spawns are sent to HEALER for diagnosis and retry",
        "height": 150,
        "width": 250
      },
      "id": "09bb4d5c-b85b-4269-a94d-85ad249e27ab",
      "name": "Error Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1680,
        460
      ]
    },
    {
      "parameters": {
        "content": "## 🤖 AI Configuration\n\n**GPT-4**: Best for auth diagnostics\n**Claude**: Superior for complex patches\n\nEach agent has dedicated memory for learning from past fixes!",
        "height": 200,
        "width": 350,
        "color": 4
      },
      "id": "24078d03-d7c1-4cfd-b017-cb263425aa08",
      "name": "AI Config Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -560,
        440
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "rvn5aCm42IVax6ps",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -1202,
        310
      ],
      "id": "626c4e22-a987-44c5-a2dc-12b50d320ac5",
      "name": "Trigger Rebuild"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "GfdOIKUvtq4sV3nf",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        572,
        235
      ],
      "id": "6265bc7c-f57e-4613-9c65-27c6a21843ef",
      "name": "Notify EVOLVER"
    }
  ],
  "pinData": {},
  "connections": {
    "Healing Request": {
      "main": [
        [
          {
            "node": "Prepare Healing Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Healing Tasks": {
      "main": [
        [
          {
            "node": "Split Healing Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Healing Tasks": {
      "main": [
        [
          {
            "node": "Route by Strategy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Strategy": {
      "main": [
        [
          {
            "node": "Reactivate Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Diagnose Auth Issue",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Workflow Details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Trigger Rebuild",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Special Healing Cases",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT for Auth": {
      "ai_languageModel": [
        [
          {
            "node": "Diagnose Auth Issue",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Auth Memory": {
      "ai_memory": [
        [
          {
            "node": "Diagnose Auth Issue",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Claude for Patches": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Patch",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Patch Memory": {
      "ai_memory": [
        [
          {
            "node": "Generate Patch",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Reactivate Workflow": {
      "main": [
        [
          {
            "node": "Reactivate Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Workflow Details": {
      "main": [
        [
          {
            "node": "Generate Patch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Patch": {
      "main": [
        [
          {
            "node": "Apply Patch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply Patch": {
      "main": [
        [
          {
            "node": "Patch Successful?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Patch Successful?": {
      "main": [
        [
          {
            "node": "Update Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Healing Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reactivate Success": {
      "main": [
        [
          {
            "node": "Merge Healing Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Workflow": {
      "main": [
        [
          {
            "node": "Merge Healing Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Healing Results": {
      "main": [
        [
          {
            "node": "Generate Healing Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Healing Report": {
      "main": [
        [
          {
            "node": "Log Healing Metrics",
            "type": "main",
            "index": 0
          },
          {
            "node": "Notify EVOLVER",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Rebuild": {
      "main": [
        [
          {
            "node": "Generate Patch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Special Healing Cases": {
      "main": [
        [
          {
            "node": "Generate Patch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Diagnose Auth Issue": {
      "main": [
        [
          {
            "node": "Generate Patch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Chicago",
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "1e6bfbad-ede6-432d-a5f0-c29c54ebc0cc",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c7c0461801171066093875fcfd1736a9fa7a56b87fa0e147c3693d3242f94a89"
  },
  "id": "FZYJQ4k3dpaL8VVt",
  "tags": []
}