{
  "name": "3. Project Genesis - Builder",
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "id": "9967d87e-d8ed-4f1f-b798-e3ca32b9cd5e",
      "name": "Build Request",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1020,
        520
      ]
    },
    {
      "parameters": {
        "content": "## ðŸ”¨ GENESIS BUILDER\nGenerates custom code, functions, and complex node configurations for workflows.",
        "height": 200,
        "width": 400,
        "color": 3
      },
      "id": "e975bde2-e7e7-4481-b8fc-10d6b8cb44eb",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1180,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Analyze the build request\nconst request = $input.first().json;\nconst buildType = determineBuildType(request.prompt || request.description || '');\n\nfunction determineBuildType(prompt) {\n  const lowerPrompt = prompt.toLowerCase();\n  \n  if (lowerPrompt.includes('function') || lowerPrompt.includes('code node')) {\n    return 'function';\n  } else if (lowerPrompt.includes('api') || lowerPrompt.includes('http')) {\n    return 'api_integration';\n  } else if (lowerPrompt.includes('transform') || lowerPrompt.includes('etl')) {\n    return 'data_transform';\n  } else if (lowerPrompt.includes('complex') || lowerPrompt.includes('multi')) {\n    return 'complex_logic';\n  }\n  \n  return 'function'; // default\n}\n\nreturn [{\n  ...request,\n  buildType,\n  timestamp: new Date().toISOString(),\n  builderVersion: '1.0'\n}];"
      },
      "id": "50023372-72f6-4df0-bc46-aee8e223127c",
      "name": "Analyze Build Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        520
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.buildType }}",
                    "rightValue": "function",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "function"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.buildType }}",
                    "rightValue": "api_integration",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "api"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.buildType }}",
                    "rightValue": "data_transform",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "transform"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "ed0312b4-9888-4466-888a-0a3c3dc6f385",
      "name": "Route by Build Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -580,
        499
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "options": {
          "systemMessage": "You are the Genesis Builder, an expert at generating n8n code nodes and functions.\n\nGenerate a complete n8n Code node configuration including:\n1. The jsCode parameter with the full function implementation\n2. Proper error handling\n3. Clear comments explaining the logic\n4. Return data in the correct n8n format: return [{ json: data }]\n\nRespond with ONLY the code that goes inside jsCode parameter."
        }
      },
      "id": "21daf296-204a-4af4-8e61-56f8edae0525",
      "name": "Generate Function Code",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -360,
        20
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "options": {
          "systemMessage": "You are the Genesis Builder, specializing in API integrations.\n\nGenerate a complete n8n HTTP Request node configuration including:\n1. Method (GET, POST, etc.)\n2. URL with proper parameter handling\n3. Headers configuration\n4. Authentication setup\n5. Error handling options\n\nProvide the complete parameters object for the HTTP Request node."
        }
      },
      "id": "5e52e098-ea1d-426e-8595-4a9677e293a2",
      "name": "Generate API Integration",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -360,
        420
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "options": {
          "systemMessage": "You are the Genesis Builder, expert at data transformations.\n\nGenerate code for data transformation including:\n1. Input data validation\n2. Transformation logic (map, filter, reduce, etc.)\n3. Error handling for edge cases\n4. Output in correct n8n format\n\nProvide complete transformation code."
        }
      },
      "id": "bbe600b2-5bc9-46fb-9c26-04e524e4ce74",
      "name": "Generate Data Transform",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -360,
        920
      ]
    },
    {
      "parameters": {
        "model": "claude-3-5-sonnet-20241022",
        "options": {
          "maxTokensToSample": 4000,
          "temperature": 0.2
        }
      },
      "id": "df6e611b-cedb-4b1d-926c-535ba0c107b1",
      "name": "Claude for Functions",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        -332,
        240
      ],
      "credentials": {
        "anthropicApi": {
          "id": "HvbZsCwADVfKiEdW",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "temperature": 0.2
        }
      },
      "id": "57634e6a-b60a-4cac-9d84-c49c52639ea9",
      "name": "GPT for APIs",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -332,
        640
      ],
      "credentials": {
        "openAiApi": {
          "id": "YHkSu30gSi9Rhwf6",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-chat",
        "options": {}
      },
      "id": "e0620f4e-acf8-4542-b0f2-56965f467825",
      "name": "DeepSeek for Transforms",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -480,
        1140
      ],
      "credentials": {
        "openRouterApi": {
          "id": "B7hBd4nBgvQ99eGi",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {},
      "id": "f1ab235a-7222-4d5c-8eaf-1255643396b7",
      "name": "Function Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -212,
        240
      ]
    },
    {
      "parameters": {},
      "id": "f9541868-9a7e-403f-bde3-def3071a4a74",
      "name": "API Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -212,
        640
      ]
    },
    {
      "parameters": {},
      "id": "8ef3a750-8f85-4ab7-af51-c93f6e74b94d",
      "name": "Transform Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -212,
        1140
      ]
    },
    {
      "parameters": {
        "jsCode": "// Test the generated code\nconst generatedCode = $input.first().json.output || $input.first().json.response || '';\nconst buildType = $('Analyze Build Request').item.json.buildType;\n\ntry {\n  // Basic validation\n  if (!generatedCode || generatedCode.length < 10) {\n    throw new Error('Generated code is too short or empty');\n  }\n  \n  // Check for common patterns based on build type\n  if (buildType === 'function') {\n    // Verify it looks like valid JavaScript\n    if (!generatedCode.includes('return') && !generatedCode.includes('=>')) {\n      throw new Error('Function code missing return statement');\n    }\n  } else if (buildType === 'api_integration') {\n    // Verify it has API configuration\n    if (!generatedCode.includes('method') && !generatedCode.includes('url')) {\n      throw new Error('API configuration missing required fields');\n    }\n  }\n  \n  // Try to parse if it's JSON configuration\n  let parsedConfig = null;\n  if (generatedCode.trim().startsWith('{')) {\n    parsedConfig = JSON.parse(generatedCode);\n  }\n  \n  return [{\n    success: true,\n    code: generatedCode,\n    buildType,\n    parsedConfig,\n    testResult: 'Code validation passed'\n  }];\n  \n} catch (error) {\n  return [{\n    success: false,\n    code: generatedCode,\n    buildType,\n    error: error.message,\n    testResult: 'Code validation failed'\n  }];\n}"
      },
      "id": "665c4ac3-9e7c-4c19-964e-d541e625b878",
      "name": "Test Generated Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        16,
        520
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "success_check",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "dc3fce88-aecd-4edd-9276-334b2e3e2db3",
      "name": "Code Valid?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        236,
        520
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "build_result",
              "name": "result",
              "value": "={{ {\n  \"success\": true,\n  \"buildId\": $('Analyze Build Request').item.json.requestId || Math.random().toString(36).substring(7),\n  \"buildType\": $json.buildType,\n  \"generatedCode\": $json.code,\n  \"configuration\": $json.parsedConfig,\n  \"metadata\": {\n    \"builderVersion\": \"1.0\",\n    \"timestamp\": new Date().toISOString(),\n    \"prompt\": $('Build Request').item.json.prompt\n  }\n} }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "96e41353-4f8f-4754-b456-c7006a0f60b7",
      "name": "Package Build Result",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        456,
        420
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare retry with more specific instructions\nconst failedAttempt = $input.first().json;\nconst originalRequest = $('Build Request').item.json;\n\nreturn [{\n  prompt: originalRequest.prompt,\n  previousError: failedAttempt.error,\n  previousCode: failedAttempt.code,\n  retryInstructions: `The previous attempt failed with: ${failedAttempt.error}. Please fix the code and ensure it follows n8n patterns.`,\n  retryCount: (originalRequest.retryCount || 0) + 1\n}];"
      },
      "id": "a1628cba-ed4f-42e9-99c5-d15d01fe4c74",
      "name": "Prepare Retry",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        456,
        620
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://your-metrics-endpoint/webhook/genesis-metrics",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "event",
              "value": "code_generated"
            },
            {
              "name": "buildType",
              "value": "={{ $json.buildType }}"
            },
            {
              "name": "success",
              "value": "={{ $json.success }}"
            },
            {
              "name": "buildId",
              "value": "={{ $json.buildId }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "d64c4001-0bf6-4f9a-a395-418ecb69d3f2",
      "name": "Log Build Metrics",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        676,
        420
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "content": "## ðŸŽ¯ Build Types\n\n**Function Node**: Custom JS logic\n**API Integration**: HTTP configs\n**Data Transform**: ETL pipelines\n**Complex Logic**: Multi-step flows",
        "height": 200,
        "width": 300,
        "color": 4
      },
      "id": "975eec1b-2e32-4822-a7f4-937d88546cea",
      "name": "Build Types",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -660,
        540
      ]
    },
    {
      "parameters": {
        "content": "## ðŸ¤– AI Configuration\n\n**Claude**: Best for complex functions\n**GPT-4**: Great for API integrations\n**DeepSeek**: Optimized for data transforms\n\nEach agent has dedicated memory!",
        "height": 200,
        "width": 350,
        "color": 4
      },
      "id": "a2b51314-bcb6-43bb-855d-7a8e76381983",
      "name": "AI Config Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -340,
        740
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Build Request": {
      "main": [
        [
          {
            "node": "Analyze Build Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Build Request": {
      "main": [
        [
          {
            "node": "Route by Build Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Build Type": {
      "main": [
        [
          {
            "node": "Generate Function Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate API Integration",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Data Transform",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Claude for Functions": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Function Code",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Function Memory": {
      "ai_memory": [
        [
          {
            "node": "Generate Function Code",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "GPT for APIs": {
      "ai_languageModel": [
        [
          {
            "node": "Generate API Integration",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "API Memory": {
      "ai_memory": [
        [
          {
            "node": "Generate API Integration",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek for Transforms": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Data Transform",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Transform Memory": {
      "ai_memory": [
        [
          {
            "node": "Generate Data Transform",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Generate Function Code": {
      "main": [
        [
          {
            "node": "Test Generated Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate API Integration": {
      "main": [
        [
          {
            "node": "Test Generated Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Data Transform": {
      "main": [
        [
          {
            "node": "Test Generated Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Generated Code": {
      "main": [
        [
          {
            "node": "Code Valid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Valid?": {
      "main": [
        [
          {
            "node": "Package Build Result",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Retry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Package Build Result": {
      "main": [
        [
          {
            "node": "Log Build Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Chicago",
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "08fe5339-f527-4b8d-a0b5-c716cb1452c1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c7c0461801171066093875fcfd1736a9fa7a56b87fa0e147c3693d3242f94a89"
  },
  "id": "rziUS1IC2EUCN3XU",
  "tags": []
}